{"version":3,"sources":["components/TeamName.js","components/Search.js","components/AddPlayers.js","components/PlayerInfo.js","components/RemovePlayer.js","components/TeamTable.js","components/Meta.js","models/util.js","models/Player.js","models/Team.js","components/TeamEditor.js","components/Home.js","App.js","index.js"],"names":["TeamName","state","visible","newTeamName","handleOk","_this","props","updateName","setState","handleCancel","handleInput","e","RegExp","test","target","value","this","_this2","react_default","a","createElement","react","typography","Title","style","textAlign","teamName","tooltip","placement","title","icon","className","marginLeft","fontSize","type","onClick","showModal","modal","onOk","onCancel","destroyOnClose","input","autoFocus","size","placeholder","onChange","onKeyPress","charCode","Component","Search","width","marginBottom","search","handleSearch","AddPlayers","rowSelection","selectedRowKeys","selectedRows","onSelect","getCheckboxProps","player","disabled","length","_","components_Search","table","bordered","columns","dataIndex","dataSource","data","loading","pagination","pageSize","showTotal","total","range","concat","current","page","pageChange","rowKey","RemovePlayer","popconfirm","okText","cancelText","onConfirm","handleRemove","href","TeamTable","key","fixed","render","components_RemovePlayer","hideOnSinglePage","Meta","statistic","float","paddingBottom","valueStyle","marginTop","suffix","API_URL","Player","attributes","k","Object","classCallCheck","serialize","playerId","firstName","split","lastName","stats","W_PCT","MIN","FGA","FGA3","FTA","OREB","DREB","AST","TOV","STL","BLK","PF","PTS","fetch","json","players","map","playerData","RichardToEmilio","teamId","id","richard","emilio","Team","rows","keys","serverRows","serverTeamName","undefined","name","getAllForTeam","method","body","JSON","stringify","headers","Accept","Content-Type","response","status","Error","newPlayersDelta","p","objectSpread","oldPlayer","teams","teamData","team","get","loadPlayers","TeamEditor","possibleConstructorReturn","getPrototypeOf","call","loadTeam","getWithPlayers","_id","then","getData","getAll","fuse","Fuse","predict","res","console","log","save","saving","history","push","catch","err","message","error","list","onTabChange","match","params","TabPane","Tabs","page_header","onBack","subTitle","components_TeamName","tabs","defaultActiveKey","tab","components_Meta","components_AddPlayers","components_TeamTable","es_button","margin","Home","found","_callee","newTeam","regenerator_default","wrap","_context","prev","next","stop","find","toLowerCase","height","display","justifyContent","flexDirection","alignItems","marginRight","App","react_router_dom","react_router","path","exact","component","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.5dc25d32.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Icon, Typography, Modal, Tooltip, Input } from 'antd';\r\n\r\nclass TeamName extends Component {\r\n    state = {\r\n        visible: false,\r\n        newTeamName: null\r\n    };\r\n\r\n    handleOk = () => {\r\n        this.props.updateName(this.state.newTeamName);\r\n        this.setState({\r\n            visible: false,\r\n            newTeamName: null\r\n        });\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            visible: false\r\n        });\r\n    };\r\n\r\n    handleInput = e => {\r\n        let reg = new RegExp(/^[\\w\\d\\ ]+$/g);\r\n        if (reg.test(e.target.value)) {\r\n            this.setState({ newTeamName: e.target.value });\r\n        }\r\n    };\r\n\r\n    showModal() {\r\n        this.setState({ visible: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Typography.Title style={{ textAlign: 'center' }}>\r\n                    {this.props.teamName}\r\n                    <Tooltip placement=\"top\" title=\"Edit team name\">\r\n                        <Icon\r\n                            className=\"editIcon\"\r\n                            style={{ marginLeft: '5px', fontSize: '14px' }}\r\n                            type=\"edit\"\r\n                            onClick={() => this.showModal()}\r\n                        />\r\n                    </Tooltip>\r\n                </Typography.Title>\r\n                <Modal\r\n                    title=\"Edit team name\"\r\n                    visible={this.state.visible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                    destroyOnClose={true}\r\n                >\r\n                    <Input\r\n                        autoFocus\r\n                        size=\"large\"\r\n                        placeholder={this.props.teamName}\r\n                        onChange={this.handleInput}\r\n                        onKeyPress={e => {\r\n                            if (e.charCode === 13) this.handleOk();\r\n                        }}\r\n                        value={this.state.newTeamName}\r\n                    />\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamName;\r\n","import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\n\r\nclass Search extends Component {\r\n    render() {\r\n        return (\r\n            <Input.Search\r\n                style={{ width: '200px', marginBottom: '10px' }}\r\n                value={this.props.search}\r\n                onChange={this.props.handleSearch}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport { Table } from 'antd';\r\nimport * as _ from 'lodash';\r\nimport PlayerInfo from './PlayerInfo';\r\n\r\nclass AddPlayers extends Component {\r\n    render() {\r\n        const rowSelection = {\r\n            selectedRowKeys: this.props.selectedRowKeys,\r\n            onChange: (selectedRowKeys, selectedRows) => {\r\n                this.props.onSelect(selectedRowKeys, selectedRows);\r\n            },\r\n            getCheckboxProps: player => ({\r\n                disabled:\r\n                    this.props.selectedRowKeys.length >= 15 &&\r\n                    _.indexOf(this.props.selectedRows, player) === -1\r\n            })\r\n        };\r\n        return (\r\n            <div style={{ textAlign: 'right' }}>\r\n                <Search\r\n                    handleSearch={this.props.handleSearch}\r\n                    search={this.props.search}\r\n                />\r\n                <Table\r\n                    bordered\r\n                    rowSelection={rowSelection}\r\n                    columns={[\r\n                        {\r\n                            title: 'Name',\r\n                            dataIndex: 'Player'\r\n                        },\r\n                        {\r\n                            title: 'Min',\r\n                            dataIndex: 'MIN'\r\n                        },\r\n                        {\r\n                            title: 'FGA',\r\n                            dataIndex: 'FGA'\r\n                        },\r\n                        {\r\n                            title: 'FG3A',\r\n                            dataIndex: 'FG3A'\r\n                        },\r\n                        {\r\n                            title: 'OREB',\r\n                            dataIndex: 'OREB'\r\n                        },\r\n                        {\r\n                            title: 'DREB',\r\n                            dataIndex: 'AST'\r\n                        },\r\n                        {\r\n                            title: 'TOV',\r\n                            dataIndex: 'TOV'\r\n                        },\r\n                        {\r\n                            title: 'STL',\r\n                            dataIndex: 'STL'\r\n                        },\r\n                        {\r\n                            title: 'BLK',\r\n                            dataIndex: 'BLK'\r\n                        },\r\n                        {\r\n                            title: 'PF',\r\n                            dataIndex: 'PF'\r\n                        },\r\n                        {\r\n                            title: 'PTS',\r\n                            dataIndex: 'PF'\r\n                        },\r\n                        {\r\n                            title: 'FTA',\r\n                            dataIndex: 'FTA'\r\n                        }\r\n                    ]}\r\n                    dataSource={this.props.data}\r\n                    loading={this.props.loading}\r\n                    pagination={{\r\n                        pageSize: 15,\r\n                        showTotal: (total, range) =>\r\n                            `${range[0]}-${range[1]} of ${total} items`,\r\n                        current: this.props.page,\r\n                        onChange: this.props.pageChange\r\n                    }}\r\n                    rowKey={'key'}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPlayers;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Modal, Popconfirm } from 'antd';\r\n\r\nclass PlayerInfo extends Component {\r\n    state = { visible: false };\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            visible: true\r\n        });\r\n    };\r\n\r\n    handleOk = e => {\r\n        this.setState({\r\n            visible: false\r\n        });\r\n    };\r\n\r\n    renderStats = () => {\r\n        let data = [];\r\n        let i = 0;\r\n        for (let key in this.props.player) {\r\n            data.push(\r\n                <p key={i++} style={{ margin: '0px' }}>\r\n                    <b>{key}: </b>\r\n                    {this.props.player[key]}\r\n                </p>\r\n            );\r\n        }\r\n        return data;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Popconfirm title=\"\" visible={false}>\r\n                    <a\r\n                        onClick={this.showModal}\r\n                        href=\"/\"\r\n                        style={{ textDecoration: 'none' }}\r\n                    >\r\n                        Expand\r\n                    </a>\r\n                </Popconfirm>\r\n                <Modal\r\n                    title=\"Player statistics\"\r\n                    okText=\"Close\"\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleOk}\r\n                    visible={this.state.visible}\r\n                    cancelButtonProps={{ style: { display: 'none' } }}\r\n                    destroyOnClose={true}\r\n                >\r\n                    {this.renderStats()}\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerInfo;\r\n","import React, { Component } from 'react';\r\nimport { Popconfirm } from 'antd';\r\n\r\nclass RemovePlayer extends Component {\r\n    render() {\r\n        return (\r\n            <Popconfirm\r\n                title=\"Remove player from team?\"\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n                onConfirm={() => this.props.handleRemove(this.props.player)}\r\n            >\r\n                <a href=\"/\">Remove</a>\r\n            </Popconfirm>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RemovePlayer;\r\n","import React, { Component } from 'react';\r\nimport { Table } from 'antd';\r\nimport RemovePlayer from './RemovePlayer';\r\nimport PlayerInfo from './PlayerInfo';\r\n\r\nclass TeamTable extends Component {\r\n    render() {\r\n        return (\r\n            <Table\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'Player'\r\n                    },\r\n                    {\r\n                        title: 'Min',\r\n                        dataIndex: 'MIN'\r\n                    },\r\n                    {\r\n                        title: 'FGA',\r\n                        dataIndex: 'FGA'\r\n                    },\r\n                    {\r\n                        title: 'FG3A',\r\n                        dataIndex: 'FG3A'\r\n                    },\r\n                    {\r\n                        title: 'OREB',\r\n                        dataIndex: 'OREB'\r\n                    },\r\n                    {\r\n                        title: 'DREB',\r\n                        dataIndex: 'AST'\r\n                    },\r\n                    {\r\n                        title: 'TOV',\r\n                        dataIndex: 'TOV'\r\n                    },\r\n                    {\r\n                        title: 'STL',\r\n                        dataIndex: 'STL'\r\n                    },\r\n                    {\r\n                        title: 'BLK',\r\n                        dataIndex: 'BLK'\r\n                    },\r\n                    {\r\n                        title: 'PF',\r\n                        dataIndex: 'PF'\r\n                    },\r\n                    {\r\n                        title: 'PTS',\r\n                        dataIndex: 'PF'\r\n                    },\r\n                    {\r\n                        title: 'FTA',\r\n                        dataIndex: 'FTA'\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        key: 'operation',\r\n                        fixed: 'right',\r\n                        width: 100,\r\n                        render: player => (\r\n                            <RemovePlayer\r\n                                player={player}\r\n                                handleRemove={this.props.handleRemove}\r\n                            />\r\n                        )\r\n                    }\r\n                ]}\r\n                pagination={{\r\n                    hideOnSinglePage: true,\r\n                    pageSize: 15\r\n                    // showTotal: (total, range) =>\r\n                    //     `${range[0]}-${range[1]} of ${total} items`\r\n                }}\r\n                dataSource={this.props.selectedRows}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamTable;\r\n","import React, { Component } from 'react';\r\nimport { Statistic } from 'antd';\r\n\r\nclass Meta extends Component {\r\n    render() {\r\n        return (\r\n            <Statistic\r\n                style={{ float: 'left', paddingBottom: '5px' }}\r\n                valueStyle={{\r\n                    marginTop: -10,\r\n                    textAlign: 'left'\r\n                }}\r\n                title=\"Players selected\"\r\n                value={this.props.length}\r\n                suffix=\"/ 15\"\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Meta;\r\n","const API_URL = \"https://nbaprojectcbackendproduction.azurewebsites.net/api\";\r\n\r\nexport default API_URL;","import API_URL from './util';\r\n\r\nexport default class Player {\r\n    constructor(attributes) {\r\n        for (let k in attributes) this[k] = attributes[k];\r\n    }\r\n\r\n    static async getAll() {\r\n        let players = (await (await fetch(`${API_URL}/Players`)).json())\r\n            .players;\r\n        return players.map(\r\n            playerData => new Player(Player.RichardToEmilio(playerData))\r\n        );\r\n    }\r\n\r\n    static async getAllForTeam(teamId) {\r\n        try {\r\n            let players = (await (await fetch(\r\n                `${API_URL}/TeamPlayers/${teamId}`\r\n            )).json()).players;\r\n            return players.map(\r\n                playerData => new Player(Player.RichardToEmilio(playerData))\r\n            );\r\n        } catch {\r\n            return []; // Error whilst retrieving data so return empty array\r\n        }\r\n    }\r\n\r\n    static async get(id) {\r\n        let player = (await (await fetch(`${API_URL}/Players/${id}`)).json())\r\n            .players[0];\r\n        return new Player(Player.RichardToEmilio(player));\r\n    }\r\n\r\n    static RichardToEmilio(richard) {\r\n        let emilio = {\r\n            Player: `${richard.firstName} ${richard.lastName}`,\r\n            key: richard.playerId\r\n        };\r\n        for (let k in richard.stats) emilio[k] = richard.stats[k];\r\n\r\n        return emilio;\r\n    }\r\n\r\n    serialize = () => ({\r\n        playerId: this.key,\r\n        firstName: this.Player.split(' ')[0],\r\n        lastName: this.Player.split(' ')[1],\r\n        stats: {\r\n            W_PCT: this.W_PCT,\r\n            MIN: this.MIN,\r\n            FGA: this.FGA,\r\n            FGA3: this.FGA3,\r\n            FTA: this.FTA,\r\n            OREB: this.OREB,\r\n            DREB: this.DREB,\r\n            AST: this.AST,\r\n            TOV: this.TOV,\r\n            STL: this.STL,\r\n            BLK: this.BLK,\r\n            PF: this.PF,\r\n            PTS: this.PTS\r\n        }\r\n    });\r\n}\r\n","import * as _ from 'lodash';\r\nimport API_URL from './util';\r\nimport Player from './Player';\r\n\r\nexport default class Team {\r\n    rows = [];\r\n    keys = [];\r\n\r\n    serverRows = [];\r\n    serverTeamName = undefined;\r\n\r\n    constructor(attributes) {\r\n        if (typeof attributes !== 'object') return; // No input object, don't set attributes\r\n        for (let k in attributes) this[k] = attributes[k];\r\n\r\n        if (typeof attributes.name === 'string')\r\n            this.serverTeamName = attributes.name;\r\n    }\r\n\r\n    static async getAll() {\r\n        let teams = (await (await fetch(`${API_URL}/Teams`)).json()).teams;\r\n        return teams.map(teamData => new Team(teamData));\r\n    }\r\n\r\n    static async get(id) {\r\n        let team = (await (await fetch(`${API_URL}/Teams/${id}`)).json())\r\n            .teams[0];\r\n        return new Team(team);\r\n    }\r\n\r\n    static async getWithPlayers(id) {\r\n        let team = await Team.get(id);\r\n        await team.loadPlayers();\r\n        return team;\r\n    }\r\n\r\n    async loadPlayers() {\r\n        this.rows = await Player.getAllForTeam(this.id);\r\n        this.serverRows = _.clone(this.rows);\r\n        this.keys = this.rows.map(player => player.key);\r\n    }\r\n\r\n    async delete() {\r\n        await fetch(`${API_URL}/Teams/${this.id}`, { method: 'DELETE' });\r\n    }\r\n\r\n    async save() {\r\n        if (typeof this.id !== 'number') {\r\n            // Create a new team\r\n            let response = await fetch(`${API_URL}/Teams`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    teamName: this.name\r\n                }),\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (response.status !== 201)\r\n                throw new Error('Failed to create new team');\r\n            let data = await response.json();\r\n            for (let k in data) this[k] = data[k];\r\n        } else if (this.name !== this.serverTeamName) {\r\n            // Update the team record\r\n            let response = await fetch(`${API_URL}/Teams/${this.id}`, {\r\n                method: 'PATCH',\r\n                body: JSON.stringify({\r\n                    teamName: this.name\r\n                }),\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (response.status !== 200)\r\n                throw new Error('Failed to update team');\r\n        }\r\n        this.serverTeamName = this.name;\r\n\r\n        // Attempt to post the new TeamPlayers if any have been added\r\n        let newPlayersDelta = _.differenceBy(\r\n            this.rows,\r\n            this.serverRows,\r\n            p => p.key\r\n        ).map(player => ({\r\n            ...player.serialize(),\r\n            teamId: this.id\r\n        }));\r\n        if (newPlayersDelta.length > 0) {\r\n            let response = await fetch(`${API_URL}/TeamPlayers/${this.id}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    players: newPlayersDelta\r\n                }),\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (response.status !== 201)\r\n                throw new Error('Failed to update team players.');\r\n        }\r\n\r\n        // Attempt to delete the old team players\r\n        for (let oldPlayer of _.differenceBy(\r\n            this.serverRows,\r\n            this.rows,\r\n            p => p.key\r\n        )) {\r\n            let response = await fetch(\r\n                `${API_URL}/TeamPlayers/${this.id}/${oldPlayer.key}`,\r\n                {\r\n                    method: 'DELETE'\r\n                }\r\n            );\r\n            if (response.status !== 200)\r\n                throw new Error('Failed to update team players.');\r\n        }\r\n\r\n        this.serverRows = _.clone(this.rows);\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Tabs, PageHeader, Button, message } from 'antd';\r\nimport TeamName from './TeamName';\r\nimport AddPlayers from './AddPlayers';\r\nimport TeamTable from './TeamTable';\r\nimport Fuse from 'fuse.js';\r\nimport * as _ from 'lodash';\r\nimport Meta from './Meta';\r\n\r\nimport Team from '../models/Team';\r\nimport Player from '../models/Player';\r\n\r\nclass TeamEditor extends Component {\r\n    team = null;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            _id: this.props.match.params.id || '',\r\n            name: this.props.match.params.name || '',\r\n            selectedRowKeys: [],\r\n            selectedRows: [],\r\n            data: [],\r\n            fuse: null,\r\n            loading: true,\r\n            search: '',\r\n            page: 1,\r\n            saving: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n        this.loadTeam();\r\n    }\r\n\r\n    componentDidUpdate(props, state) {\r\n        if (\r\n            this.state.name !== state.name ||\r\n            this.state.selectedRowKeys !== state.selectedRowKeys ||\r\n            this.state.selectedRows !== state.selectedRows\r\n        )\r\n            this.save();\r\n    }\r\n\r\n    loadTeam = () => {\r\n        Team.getWithPlayers(this.state._id).then(team => {\r\n            this.team = team;\r\n            this.setState({\r\n                selectedRowKeys: team.keys,\r\n                name: team.name,\r\n                selectedRows: team.rows\r\n            });\r\n        });\r\n    };\r\n\r\n    getData = () => {\r\n        Player.getAll()\r\n            .then(data => this.setState({ data }))\r\n            .then(() => {\r\n                this.setState({\r\n                    fuse: new Fuse(this.state.data, {\r\n                        keys: ['Player']\r\n                    }),\r\n                    loading: false\r\n                });\r\n            });\r\n    };\r\n\r\n    predict = () => {\r\n        fetch('/api/predict', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state.selectedRows),\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => console.log(json));\r\n    };\r\n\r\n    save = () => {\r\n        this.setState({ saving: true });\r\n        // Update the team object\r\n        this.team.name = this.state.name;\r\n        this.team.rows = this.state.selectedRows;\r\n        this.team.keys = this.state.selectedRowKeys;\r\n        // Save the changes\r\n        this.team\r\n            .save()\r\n            .then(() => {\r\n                this.props.history.push(`/team/${this.team.id}`);\r\n                this.setState({ saving: false });\r\n            })\r\n            .catch(err => {\r\n                this.setState({ saving: false });\r\n                message.error(`Error: ${err.message}`);\r\n            });\r\n    };\r\n\r\n    handleSearch = e => {\r\n        e.target.value === ''\r\n            ? this.setState({ data: this.state.fuse.list, search: '' })\r\n            : this.setState({\r\n                  data: this.state.fuse.search(e.target.value),\r\n                  page: 1,\r\n                  search: e.target.value\r\n              });\r\n    };\r\n\r\n    onSelect = (selectedRowKeys, selectedRows) => {\r\n        this.setState({ selectedRowKeys, selectedRows });\r\n    };\r\n\r\n    onTabChange = () => {\r\n        this.handleSearch({ target: { value: '' } });\r\n    };\r\n\r\n    handleRemove = player => {\r\n        this.setState({\r\n            selectedRowKeys: _.without(this.state.selectedRowKeys, player.key),\r\n            selectedRows: _.without(this.state.selectedRows, player)\r\n        });\r\n    };\r\n\r\n    updateName = name => {\r\n        this.setState({ name });\r\n    };\r\n\r\n    pageChange = e => {\r\n        this.setState({ page: e });\r\n    };\r\n\r\n    render() {\r\n        let TabPane = Tabs.TabPane;\r\n        return (\r\n            <Fragment>\r\n                <PageHeader\r\n                    style={{ textAlign: 'left' }}\r\n                    onBack={() => {\r\n                        this.props.history.push('/');\r\n                    }}\r\n                    title=\"Team Editor\"\r\n                    subTitle=\"create or modify an existing team\"\r\n                />\r\n                <TeamName\r\n                    updateName={this.updateName}\r\n                    teamName={this.state.name}\r\n                    loading={this.state.loading}\r\n                />\r\n                <Tabs defaultActiveKey=\"1\" onChange={this.onTabChange}>\r\n                    <TabPane tab=\"Add Players\" key=\"1\">\r\n                        <Meta length={this.state.selectedRowKeys.length} />\r\n                        <AddPlayers\r\n                            loading={this.state.loading}\r\n                            data={this.state.data}\r\n                            onSelect={this.onSelect}\r\n                            selectedRowKeys={this.state.selectedRowKeys}\r\n                            selectedRows={this.state.selectedRows}\r\n                            handleSearch={this.handleSearch}\r\n                            search={this.state.search}\r\n                            page={this.state.page}\r\n                            pageChange={this.pageChange}\r\n                        />\r\n                    </TabPane>\r\n                    <TabPane tab=\"View Team\" key=\"2\">\r\n                        <Meta length={this.state.selectedRowKeys.length} />\r\n                        <TeamTable\r\n                            selectedRows={this.state.selectedRows}\r\n                            handleRemove={this.handleRemove}\r\n                        />\r\n                        <Button\r\n                            disabled={this.state.selectedRows.length < 3}\r\n                            type=\"primary\"\r\n                            onClick={this.predict}\r\n                            style={{ margin: '10px' }}\r\n                        >\r\n                            Predict\r\n                        </Button>\r\n                    </TabPane>\r\n                </Tabs>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamEditor;\r\n","import React, { Component } from 'react';\r\nimport { Button, Typography, Input, message } from 'antd';\r\nimport Team from '../models/Team';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        name: '',\r\n        found: false,\r\n        id: null,\r\n        teams: [],\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        Team.getAll().then(teams => {\r\n            this.setState({ teams, loading: false });\r\n        });\r\n    }\r\n\r\n    handleOk = async () => {\r\n        if (this.state.name === '') message.error('Please enter a team name');\r\n        else {\r\n            if (this.state.id != null) {\r\n                this.props.history.push(`/team/${this.state.id}`);\r\n            } else {\r\n                let newTeam = new Team({ name: this.state.name });\r\n                await newTeam.save();\r\n                this.props.history.push(`/team/${newTeam.id}`);\r\n            }\r\n        }\r\n    };\r\n\r\n    handleInput = e => {\r\n        // a-z 0-9, _ and spaces);\r\n        let reg = new RegExp(/^[\\w\\d\\ ]+$/g);\r\n\r\n        if (reg.test(e.target.value) || e.target.value === '') {\r\n            if (\r\n                !this.state.teams.find(team => {\r\n                    if (\r\n                        team.name.toLowerCase() === e.target.value.toLowerCase()\r\n                    ) {\r\n                        this.setState({ id: team.id });\r\n                        return true;\r\n                    }\r\n                })\r\n            ) {\r\n                this.setState({ id: null });\r\n            }\r\n            this.setState({ name: e.target.value });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center'\r\n                }}\r\n            >\r\n                <Typography.Title>R.P.S.</Typography.Title>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    <Input\r\n                        autoFocus\r\n                        placeholder={this.props.teamName}\r\n                        onChange={this.handleInput}\r\n                        style={{ marginRight: '10px' }}\r\n                        value={this.state.name}\r\n                    />\r\n                    {this.state.id != null ? (\r\n                        <Button onClick={this.handleOk} type=\"primary\">\r\n                            View Team\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            onClick={this.handleOk}\r\n                            disabled={this.state.loading}\r\n                            type=\"primary\"\r\n                        >\r\n                            Create Team\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport TeamEditor from './components/TeamEditor';\r\nimport Home from './components/Home';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router>\r\n                    <Route path=\"/\" exact component={Home} />\r\n                    <Route path=\"/create/:name\" component={TeamEditor} />\r\n                    <Route path=\"/team/:id\" component={TeamEditor} />\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}